{"version":3,"file":"static/js/110.f5001800.chunk.js","mappings":"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","sources":["components/chatSystem/Conversation.js","components/chatSystem/AdminPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst conversation = ({\r\n  conversation,\r\n  currentUserId,\r\n  setCurrentChatConversation,\r\n  setClientPicture,\r\n  setNotification,\r\n  notification,\r\n}) => {\r\n  const [client, setClient] = useState(null);\r\n\r\n  // fetch client information\r\n  useEffect(() => {\r\n    // find client id inside conversation members\r\n    const clientId = conversation.members.find(\r\n      (member) => member !== currentUserId\r\n    );\r\n\r\n    //function that handle the fetch from our database\r\n    const fechingClientInfoHandler = async () => {\r\n      try {\r\n        if (clientId) {\r\n          // fetching client data by user id\r\n          const fetchClientInfoByUserId = await fetch(\r\n            `${process.env.REACT_APP_BACKEND_URL}/api/user/${clientId}`\r\n          );\r\n\r\n          // parse the response\r\n          const responseJson = await fetchClientInfoByUserId.json();\r\n\r\n          if (responseJson.data) {\r\n            setClient(responseJson.data);\r\n            setClientPicture(responseJson.data.picture);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.log(error.stack);\r\n      }\r\n    };\r\n\r\n    fechingClientInfoHandler();\r\n  }, [currentUserId, conversation]);\r\n\r\n  // calculate how many notification has each user\r\n  let notifCount = 0;\r\n\r\n  if (notification && client) {\r\n    notification.map((notif) => {\r\n      if (notif.senderId === client._id) {\r\n        notifCount += 1;\r\n      }\r\n      return notifCount;\r\n    });\r\n  }\r\n\r\n  // filter notification array after reading the message\r\n  const removeNotificationHandler = () => {\r\n    setNotification(\r\n      notification.filter((notif) => notif.senderId !== client._id)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <UserInfo\r\n      onClick={() => {\r\n        setCurrentChatConversation(conversation);\r\n        removeNotificationHandler();\r\n      }}\r\n      key={conversation._id}\r\n    >\r\n      <ClientPicture src={client?.picture} />\r\n      {notifCount > 0 && <ItemCount>{notifCount}</ItemCount>}\r\n      <UserName>{client?.username}</UserName>\r\n    </UserInfo>\r\n  );\r\n};\r\n\r\n// conversation style\r\nconst UserInfo = styled.div`\r\n  margin: 0px 15px;\r\n  padding: 20px;\r\n  width: fit-content;\r\n  cursor: pointer;\r\n  transition: all 0.5s ease-in-out;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 13px;\r\n  position: relative;\r\n\r\n  :hover {\r\n    background-color: #f5f0ed;\r\n  }\r\n`;\r\n\r\nconst ClientPicture = styled.img`\r\n  width: 50px;\r\n  height: 50px;\r\n  border-radius: 50%;\r\n`;\r\n\r\nconst UserName = styled.p`\r\n  font-weight: 700px;\r\n`;\r\n\r\nconst ItemCount = styled.span`\r\n  width: 19px;\r\n  height: 19px;\r\n  border-radius: 50%;\r\n  background: white;\r\n  color: black;\r\n  position: absolute;\r\n  top: 15px;\r\n\r\n  right: 13px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\nexport default conversation;\r\n","import React, { useState, useRef, useEffect, useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Conversation from \"../chatSystem/Conversation\";\r\nimport { ChatContext } from \"../context/ChatContext\";\r\nimport { CurrentUserContext } from \"../context/CurrentUserContext\";\r\nimport { BiSend } from \"react-icons/bi\";\r\nimport { Circles } from \"react-loader-spinner\";\r\n\r\nconst AdminPage = () => {\r\n  const { socket, setNotification, notification } = useContext(ChatContext);\r\n\r\n  // get user information from current user context hook\r\n  const { user } = useContext(CurrentUserContext);\r\n\r\n  const [chatLoading, setChatLoading] = useState(false);\r\n  const [chatConversation, setChatConversation] = useState([]);\r\n  const [currentChatConversation, setCurrentChatConversation] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [comingMessage, setComingMessage] = useState(\"\");\r\n  const [clientPicture, setClientPicture] = useState();\r\n\r\n  // using ref to scroll to bottom inside div messages\r\n  const scrollToBottomRef = useRef();\r\n\r\n  // receiving messages from socket server\r\n  useEffect(() => {\r\n    if (socket) {\r\n      socket?.on(\"getMessage\", (data) => {\r\n        setComingMessage({\r\n          senderId: data.senderId,\r\n          text: data.text,\r\n          createdAt: new Date(Date.now()),\r\n        });\r\n      });\r\n    }\r\n  }, [socket]);\r\n\r\n  // checking if the message that we receive came from a user that is member in this chat\r\n  useEffect(() => {\r\n    comingMessage &&\r\n      currentChatConversation?.members.includes(comingMessage.senderId) &&\r\n      setMessages((prev) => [...prev, comingMessage]);\r\n  }, [comingMessage, currentChatConversation]);\r\n\r\n  // fetching conversation by user id\r\n  useEffect(() => {\r\n    try {\r\n      // function that handle the fetch from our database\r\n      const fechingConversationHandler = async () => {\r\n        // fetching conversation data by user id\r\n        const fetchConversationByUserId = await fetch(\r\n          `${process.env.REACT_APP_BACKEND_URL}/api/conversation/${user?._id}`\r\n        );\r\n\r\n        // parse the response\r\n        const responseJson = await fetchConversationByUserId.json();\r\n\r\n        if (responseJson.data.length > 0) {\r\n          setChatConversation(responseJson.data);\r\n        }\r\n      };\r\n      fechingConversationHandler();\r\n    } catch (error) {\r\n      console.log(error.stack);\r\n    }\r\n  }, [user?._id]);\r\n\r\n  // fetch all messages for specific chat\r\n  useEffect(() => {\r\n    setChatLoading(true);\r\n    // function that handle the fetch of messages\r\n    const chatMessagesHandler = async () => {\r\n      try {\r\n        // fetching messages data by chat id\r\n        const response = await fetch(\r\n          `${process.env.REACT_APP_BACKEND_URL}/api/messages/${currentChatConversation?._id}`\r\n        );\r\n\r\n        // parse the response\r\n        const responseJson = await response.json();\r\n\r\n        if (responseJson.data.length > 0) {\r\n          setMessages(responseJson.data);\r\n          setChatLoading(false);\r\n        }\r\n      } catch (error) {\r\n        console.log(error.stack);\r\n        setChatLoading(false);\r\n      }\r\n      setChatLoading(false);\r\n    };\r\n    chatMessagesHandler();\r\n  }, [currentChatConversation]);\r\n\r\n  // function that handle the send of messages\r\n  const sendMessageHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const receiverId = currentChatConversation.members.find(\r\n      (member) => member !== user?._id\r\n    );\r\n\r\n    const messageinfo = {\r\n      senderId: user?._id,\r\n      text: newMessage,\r\n      receiverId: receiverId,\r\n      conversationId: currentChatConversation._id,\r\n      createAt: new Date(Date.now()),\r\n    };\r\n\r\n    socket.emit(\"sendMessage\", {\r\n      senderId: user?._id,\r\n      receiverId: receiverId,\r\n      text: newMessage,\r\n    });\r\n\r\n    setNewMessage(\"\");\r\n\r\n    try {\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(messageinfo),\r\n      };\r\n\r\n      // post messages to db\r\n      const response = await fetch(\r\n        `${process.env.REACT_APP_BACKEND_URL}/api/message`,\r\n        requestOptions\r\n      );\r\n\r\n      if (response.ok) {\r\n        setMessages([...messages, messageinfo]);\r\n      }\r\n    } catch (error) {\r\n      console.log(error.stack);\r\n    }\r\n  };\r\n\r\n  // finction to scroll to bottom when reveiving or sending messages\r\n  useEffect(() => {\r\n    scrollToBottomRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  return (\r\n    <AdminPageWrapper>\r\n      <AdminChatContainer>\r\n        {chatConversation && (\r\n          <>\r\n            <ChatUser>\r\n              {chatConversation.map((conversation) => {\r\n                return (\r\n                  <>\r\n                    <Conversation\r\n                      key={conversation._id}\r\n                      conversation={conversation}\r\n                      currentUserId={user?._id}\r\n                      setCurrentChatConversation={setCurrentChatConversation}\r\n                      setClientPicture={setClientPicture}\r\n                      setNotification={setNotification}\r\n                      notification={notification}\r\n                    />\r\n                  </>\r\n                );\r\n              })}\r\n            </ChatUser>\r\n\r\n            {chatLoading ? (\r\n              <Circles\r\n                height=\"30\"\r\n                width=\"30\"\r\n                color=\"#242526\"\r\n                ariaLabel=\"circles-loading\"\r\n                wrapperClass=\"spinner\"\r\n                visible={true}\r\n              />\r\n            ) : (\r\n              <ChatDiv>\r\n                {currentChatConversation ? (\r\n                  <>\r\n                    <MsgDiv>\r\n                      {messages.map((message) => {\r\n                        return (\r\n                          <MessageWrapper key={message._id}>\r\n                            {message.senderId !== user?._id ? (\r\n                              <RightMsg key={message._id}>\r\n                                <MsgEl>{message.text}</MsgEl>\r\n                                <Img src={clientPicture} alt=\"RenterProfile\" />\r\n                              </RightMsg>\r\n                            ) : (\r\n                              <LeftMsg key={message._id}>\r\n                                <Img src={user?.picture} alt=\"RenterProfile\" />\r\n                                <MsgEl>{message.text}</MsgEl>\r\n                              </LeftMsg>\r\n                            )}\r\n                          </MessageWrapper>\r\n                        );\r\n                      })}\r\n                    </MsgDiv>\r\n\r\n                    <Form onSubmit={sendMessageHandler}>\r\n                      <Input\r\n                        value={newMessage}\r\n                        placeholder=\"Message\"\r\n                        onChange={(e) => setNewMessage(e.target.value)}\r\n                        onKeyDown={(e) =>\r\n                          e.key === \"Enter\" ? sendMessageHandler(e) : null\r\n                        }\r\n                      />\r\n                      <SendButton type=\"submit\">\r\n                        <BiSend className=\"sendIcon\" />\r\n                      </SendButton>\r\n                    </Form>\r\n                  </>\r\n                ) : (\r\n                  <ChatFirstMsg>No chat selected</ChatFirstMsg>\r\n                )}\r\n              </ChatDiv>\r\n            )}\r\n          </>\r\n        )}\r\n      </AdminChatContainer>\r\n    </AdminPageWrapper>\r\n  );\r\n};\r\n\r\n// admin page style\r\nconst AdminPageWrapper = styled.div`\r\n  min-height: 100vh;\r\n  background-color: #f5f0ed;\r\n  position: relative;\r\n`;\r\n\r\nconst AdminChatContainer = styled.div`\r\n  max-width: 950px;\r\n  width: 90%;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n\r\n  .spinner {\r\n    margin-top: 60px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n`;\r\nconst ChatUser = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  gap: 15px;\r\n`;\r\n\r\nconst ChatFirstMsg = styled.span`\r\n  font-size: 50px;\r\n  width: 100%;\r\n  text-align: center;\r\n  color: #f5f5f3;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n\r\n  @media screen and (max-width: 700px) {\r\n    font-size: 35px;\r\n  }\r\n`;\r\n\r\nconst ChatDiv = styled.div`\r\n  margin: 20px 0;\r\n  padding: 10px;\r\n  height: 70vh;\r\n  background-image: url(\"https://cdn.wallpapersafari.com/19/15/HlpKYq.png\");\r\n  background-size: contain;\r\n  position: relative;\r\n  border-radius: 25px;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    height: 60vh;\r\n  }\r\n`;\r\nconst Form = styled.div``;\r\n\r\nconst MessageWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 9px 10px;\r\n`;\r\n\r\nconst RightMsg = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n  gap: 7px;\r\n  padding-top: 13px;\r\n`;\r\nconst LeftMsg = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n`;\r\n\r\nconst Img = styled.img`\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n`;\r\n\r\nconst MsgDiv = styled.div`\r\n  overflow-x: hidden;\r\n  overflow-y: scroll;\r\n  height: 90%;\r\n\r\n  ::-webkit-scrollbar {\r\n    width: 8px;\r\n    height: 8px;\r\n  }\r\n\r\n  ::-webkit-scrollbar-thumb {\r\n    background: #f5f0ed;\r\n    border-radius: 50px;\r\n  }\r\n\r\n  ::-webkit-scrollbar-track {\r\n    background: #f5f0ed;\r\n    border-radius: 50px;\r\n  }\r\n\r\n  @media screen and (max-width: 700px) {\r\n    height: 85%;\r\n  }\r\n`;\r\nconst MsgEl = styled.div`\r\n  background-color: #fff;\r\n  width: fit-content;\r\n  border-radius: 25px;\r\n  padding: 10px 12px;\r\n  font-size: 15px;\r\n  font-weight: 400;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  position: absolute;\r\n  bottom: 7px;\r\n  left: 10px;\r\n  padding-left: 9px;\r\n  width: 90%;\r\n  height: 40px;\r\n  outline: none;\r\n  border-radius: 25px;\r\n  border: 1px solid white;\r\n  color: white;\r\n  background-color: transparent;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    width: 80%;\r\n  }\r\n`;\r\n\r\nconst SendButton = styled.button`\r\n  border: 1px solid white;\r\n  .sendIcon {\r\n    font-size: 40px;\r\n    color: #f5f0ed;\r\n    position: absolute;\r\n    bottom: 10px;\r\n    right: 20px;\r\n    border-radius: 50%;\r\n    border: none;\r\n    background-color: transparent;\r\n    cursor: pointer;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nexport default AdminPage;\r\n"],"names":["UserInfo","styled","div","_templateObject","_taggedTemplateLiteral","ClientPicture","img","_templateObject2","UserName","p","_templateObject3","ItemCount","span","_templateObject4","_ref","conversation","currentUserId","setCurrentChatConversation","setClientPicture","setNotification","notification","client","setClient","useState","useEffect","clientId","members","find","member","async","fetchClientInfoByUserId","fetch","concat","process","responseJson","json","data","picture","error","console","log","stack","fechingClientInfoHandler","notifCount","map","notif","senderId","_id","_jsxs","onClick","filter","children","_jsx","src","username","AdminPageWrapper","AdminChatContainer","ChatUser","ChatFirstMsg","ChatDiv","_templateObject5","Form","_templateObject6","MessageWrapper","_templateObject7","RightMsg","_templateObject8","LeftMsg","_templateObject9","Img","_templateObject10","MsgDiv","_templateObject11","MsgEl","_templateObject12","Input","input","_templateObject13","SendButton","button","_templateObject14","AdminPage","socket","useContext","ChatContext","user","CurrentUserContext","chatLoading","setChatLoading","chatConversation","setChatConversation","currentChatConversation","messages","setMessages","newMessage","setNewMessage","comingMessage","setComingMessage","clientPicture","scrollToBottomRef","useRef","on","text","createdAt","Date","now","includes","prev","fetchConversationByUserId","length","fechingConversationHandler","response","chatMessagesHandler","sendMessageHandler","e","preventDefault","receiverId","messageinfo","conversationId","createAt","emit","requestOptions","method","headers","body","JSON","stringify","ok","_scrollToBottomRef$cu","current","scrollIntoView","behavior","_Fragment","Conversation","Circles","height","width","color","ariaLabel","wrapperClass","visible","message","alt","onSubmit","value","placeholder","onChange","target","onKeyDown","key","type","BiSend","className"],"sourceRoot":""}