{"version":3,"file":"static/js/910.5ac5d838.chunk.js","mappings":"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","sources":["components/chatSystem/Chat.js","components/styleComponents/ImageSlider.js","components/styleComponents/Calendar.js","components/Reviews/Review.js","components/Reviews/ReviewForm.js","components/Reviews/Reviews.js","pages/Listing.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport useClickOutside from \"../hooks/useClickOutside\";\r\nimport { BiSend } from \"react-icons/bi\";\r\nimport { ChatContext } from \"../context/ChatContext\";\r\n\r\nconst Chat = ({\r\n  picture,\r\n  renterUsername,\r\n  openChat,\r\n  setOpenChat,\r\n  currentUserName,\r\n  currentUserPicture,\r\n  currentUserId,\r\n  renterId,\r\n}) => {\r\n  const [welcomeMsg, setWelcomeMsg] = useState(\"\");\r\n  const {\r\n    currentChatMembers,\r\n    setCurrentChatMembers,\r\n    message,\r\n    setMessage,\r\n    chatConversation,\r\n    setChatConversation,\r\n    notification,\r\n    setNotification,\r\n    socket,\r\n  } = useContext(ChatContext);\r\n\r\n  // using ref to scroll to bottom inside div messages\r\n  const scrollToBottomRef = useRef();\r\n\r\n  // using useRef to prevent useEffect from running twice as it does in version 18\r\n  // without this method it will create a conversation twice each time\r\n  const effectRanOnce = useRef(false);\r\n\r\n  // create new conversation if we don't find one when user open the chat\r\n  useEffect(() => {\r\n    if (effectRanOnce.current === false) {\r\n      const createNewConversationHandler = async () => {\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            senderId: currentUserId,\r\n            receiverId: renterId,\r\n            createAt: Date.now(),\r\n          }),\r\n        };\r\n\r\n        try {\r\n          // post a new conversation between the renter and the current user\r\n          const response = await fetch(\r\n            `${process.env.REACT_APP_BACKEND_URL}/api/conversation`,\r\n            requestOptions\r\n          );\r\n\r\n          // parse the response\r\n          const parseResponse = await response.json();\r\n\r\n          if (parseResponse.status === 201) {\r\n            setCurrentChatMembers(parseResponse.data);\r\n          }\r\n        } catch (error) {\r\n          console.log(error.stack);\r\n        }\r\n      };\r\n      createNewConversationHandler();\r\n\r\n      // cleanup function\r\n      return () => {\r\n        // set the effectRanOnce to true to prevent useEffect from running twice\r\n        effectRanOnce.current = true;\r\n      };\r\n    }\r\n  }, [currentUserId, renterId]);\r\n\r\n  // fetching conversation by user id\r\n  useEffect(() => {\r\n    try {\r\n      // function that handle the fetch from our database\r\n      const fechingConversationHandler = async () => {\r\n        // fetching conversation data by user id\r\n        const fetchConversationByUserId = await fetch(\r\n          `${process.env.REACT_APP_BACKEND_URL}/api/conversation/${currentUserId}`\r\n        );\r\n\r\n        // parse the response\r\n        const responseJson = await fetchConversationByUserId.json();\r\n\r\n        if (responseJson.data.length > 0) {\r\n          const findConversation = responseJson.data.find((conversation) => {\r\n            return (\r\n              (conversation.members[0] === currentUserId &&\r\n                conversation.members[1] === renterId) ||\r\n              (conversation.members[1] === currentUserId &&\r\n                conversation.members[0] === renterId)\r\n            );\r\n          });\r\n\r\n          setCurrentChatMembers(findConversation);\r\n        }\r\n      };\r\n      fechingConversationHandler();\r\n    } catch (error) {\r\n      console.log(error.stack);\r\n    }\r\n  }, []);\r\n\r\n  // first initialisation with the server\r\n  useEffect(() => {\r\n    if (socket) {\r\n      // emiting information details to the server\r\n      socket.emit(\"welcome-message\", { currentUserName, renterUsername });\r\n      socket.emit(\"initialisation-add-user\", currentUserId);\r\n\r\n      // recieving the welcome message from the server and store it in welcome msg state\r\n      socket.on(\"welcome-response\", (message) => {\r\n        setWelcomeMsg(message);\r\n      });\r\n    }\r\n  }, [socket, currentUserName, currentUserId]);\r\n\r\n  // fetch all messages for specific chat\r\n  useEffect(() => {\r\n    // function that handle the fetch of messages\r\n    const chatMessagesHandler = async () => {\r\n      try {\r\n        // fetching messages data by chat id\r\n        const response = await fetch(\r\n          `${process.env.REACT_APP_BACKEND_URL}/api/messages/${currentChatMembers?._id}`\r\n        );\r\n\r\n        // parse the response\r\n        const responseJson = await response.json();\r\n\r\n        if (responseJson.data.length > 0) {\r\n          setChatConversation(responseJson.data);\r\n        }\r\n      } catch (error) {\r\n        console.log(error.stack);\r\n      }\r\n    };\r\n    chatMessagesHandler();\r\n  }, [currentChatMembers]);\r\n\r\n  // receiving new messages from the server\r\n  useEffect(() => {\r\n    if (socket) {\r\n      // getting messege from the server\r\n      socket.on(\"getMessage\", (data) => {\r\n        if (\r\n          currentChatMembers?.members?.includes(data.senderId) === true &&\r\n          currentChatMembers?.members?.includes(data.sendToId) === true\r\n        ) {\r\n          setChatConversation([...chatConversation, data]);\r\n        } else if (!openChat && !notification.includes(data)) {\r\n          setNotification([...notification, data]);\r\n        }\r\n      });\r\n    }\r\n  }, [socket, chatConversation, notification, openChat]);\r\n\r\n  // function that handle the send of messages\r\n  const sendMessageHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const messageinfo = {\r\n      senderId: currentUserId,\r\n      conversationId: currentChatMembers?._id,\r\n      receiverId: renterId,\r\n      text: message,\r\n      createAt: Date.now(),\r\n    };\r\n\r\n    // emit the message to socketio server\r\n    socket.emit(\"sendMessage\", messageinfo);\r\n\r\n    setMessage(\"\");\r\n\r\n    try {\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(messageinfo),\r\n      };\r\n\r\n      // post messages to db\r\n      const response = await fetch(\r\n        `${process.env.REACT_APP_BACKEND_URL}/api/message`,\r\n        requestOptions\r\n      );\r\n\r\n      if (response.ok) {\r\n        setChatConversation([...chatConversation, messageinfo]);\r\n      }\r\n    } catch (error) {\r\n      console.log(error.stack);\r\n    }\r\n  };\r\n\r\n  // custom hook to check and close if we click outside the chat\r\n  let ref = useClickOutside(() => {\r\n    setOpenChat(false);\r\n  });\r\n\r\n  // finction to scroll to bottom when reveiving or sending messages\r\n  useEffect(() => {\r\n    scrollToBottomRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [chatConversation]);\r\n\r\n  return (\r\n    <ChatWrapper ref={ref}>\r\n      {openChat && (\r\n        <ChatWindow>\r\n          <ChatDiv>\r\n            {chatConversation.length === 0 && (\r\n              <WelcomMsgDiv>\r\n                <Img src={picture} alt=\"userProfile\" />\r\n                <WelcomeMsg>{welcomeMsg.text}</WelcomeMsg>\r\n              </WelcomMsgDiv>\r\n            )}\r\n            <MsgDiv>\r\n              {chatConversation.map((msg, index) => {\r\n                return (\r\n                  <MessageWrapper key={index} ref={scrollToBottomRef}>\r\n                    {msg.senderId !== currentUserId &&\r\n                    msg.senderId === renterId ? (\r\n                      <RightMsg>\r\n                        <MsgEl key={index}>{msg.text}</MsgEl>\r\n                        <Img src={picture} alt=\"RenterProfile\" />\r\n                      </RightMsg>\r\n                    ) : (\r\n                      msg.senderId === currentUserId &&\r\n                      msg.receiverId === renterId && (\r\n                        <LeftMsg>\r\n                          <Img src={currentUserPicture} alt=\"userProfile\" />\r\n                          <MsgEl>{msg.text}</MsgEl>\r\n                        </LeftMsg>\r\n                      )\r\n                    )}\r\n                  </MessageWrapper>\r\n                );\r\n              })}\r\n            </MsgDiv>\r\n          </ChatDiv>\r\n          <form onSubmit={sendMessageHandler}>\r\n            <Input\r\n              value={message}\r\n              placeholder=\"Message\"\r\n              onChange={(e) => setMessage(e.target.value)}\r\n              onKeyDown={(e) =>\r\n                e.key === \"Enter\" ? sendMessageHandler(e) : null\r\n              }\r\n            />\r\n            <SendButton type=\"submit\">\r\n              <BiSend className=\"sendIcon\" />\r\n            </SendButton>\r\n          </form>\r\n        </ChatWindow>\r\n      )}\r\n      <Button\r\n        onClick={() => {\r\n          // toggle the open and close of the chat\r\n          setOpenChat(!openChat);\r\n        }}\r\n      >\r\n        <Msg className=\"msg-display\">Hey i'm {renterUsername}!</Msg>\r\n        <img src={picture} alt=\"renter picture\" />\r\n      </Button>\r\n    </ChatWrapper>\r\n  );\r\n};\r\n\r\n// chat style\r\nconst ChatWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end;\r\n`;\r\nconst ChatWindow = styled.div`\r\n  width: 290px;\r\n  height: 400px;\r\n  border: 1px solid #000;\r\n  background-color: #f5f5f3;\r\n  border-radius: 10px;\r\n  transition: all 0.5s ease;\r\n\r\n  border: 1px solid;\r\n  z-index: 99999;\r\n  position: relative;\r\n`;\r\n\r\nconst ChatDiv = styled.div`\r\n  height: 340px;\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n\r\n  ::-webkit-scrollbar {\r\n    width: 8px;\r\n    height: 8px;\r\n  }\r\n\r\n  ::-webkit-scrollbar-thumb {\r\n    background: white;\r\n    border-radius: 50px;\r\n  }\r\n\r\n  ::-webkit-scrollbar-track {\r\n    background: #f5f0ed;\r\n    border-radius: 50px;\r\n    border-top-right-radius: 25px;\r\n    border-top-left-radius: 25px;\r\n  }\r\n`;\r\nconst MessageWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 9px 10px;\r\n`;\r\n\r\nconst RightMsg = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n  gap: 7px;\r\n  padding-top: 13px;\r\n`;\r\nconst LeftMsg = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n`;\r\n\r\nconst MsgDiv = styled.div`\r\n  /* max-height: 345px; */\r\n`;\r\nconst MsgEl = styled.div`\r\n  background-color: #fff;\r\n  width: fit-content;\r\n  border-radius: 25px;\r\n  padding: 10px 12px;\r\n  font-size: 15px;\r\n  font-weight: 400;\r\n`;\r\n\r\nconst WelcomMsgDiv = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  justify-content: center;\r\n  gap: 6px;\r\n  padding-top: 13px;\r\n`;\r\nconst WelcomeMsg = styled.div`\r\n  background-color: #fff;\r\n  width: 80%;\r\n  border-radius: 25px;\r\n  padding: 10px 12px;\r\n  font-size: 15px;\r\n  font-weight: 400;\r\n`;\r\nconst Img = styled.img`\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n`;\r\nconst Input = styled.textarea`\r\n  position: absolute;\r\n  bottom: 7px;\r\n  left: 5px;\r\n  padding-left: 9px;\r\n  padding-top: 10px;\r\n  width: 85%;\r\n  height: 40px;\r\n  outline: none;\r\n  border-radius: 25px;\r\n  border: 1px solid #000;\r\n  background-color: transparent;\r\n`;\r\n\r\nconst SendButton = styled.button`\r\n  position: absolute;\r\n  bottom: 7px;\r\n  right: 5px;\r\n  height: 40px;\r\n  width: 10%;\r\n  border-radius: 50%;\r\n  border: none;\r\n  background-color: transparent;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: all 0.5s ease;\r\n  border: 1px solid;\r\n\r\n  :hover {\r\n    border: none;\r\n    transform: scale(0.9);\r\n  }\r\n\r\n  .sendIcon {\r\n    font-size: 22px;\r\n    color: #242526;\r\n  }\r\n`;\r\nconst Msg = styled.div`\r\n  background: #000;\r\n  color: #f5f0ed;\r\n  padding: 7px 10px;\r\n  border-radius: 25px;\r\n  opacity: 0;\r\n  cursor: pointer;\r\n  transition: all 0.4s ease;\r\n  font-size: 15px;\r\n\r\n  :hover {\r\n    opacity: 1;\r\n  }\r\n`;\r\nconst Button = styled.button`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 9px;\r\n  background-color: transparent;\r\n  border: none;\r\n  border-radius: 50%;\r\n  height: 80px;\r\n  cursor: pointer;\r\n  transition: all 0.33s ease;\r\n\r\n  :hover {\r\n    .msg-display {\r\n      opacity: 1;\r\n    }\r\n  }\r\n\r\n  img {\r\n    width: 60px;\r\n    height: 60px;\r\n    border-radius: 50%;\r\n  }\r\n`;\r\n\r\nexport default Chat;\r\n","import { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IoIosArrowForward, IoIosArrowBack } from \"react-icons/io\";\r\n\r\n// Image slider componenent\r\nconst ImageSlider = ({ slides }) => {\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n\r\n  // function that handle slide to the previous image\r\n  const goToPreviousHandler = () => {\r\n    if (currentIndex === 0) {\r\n      setCurrentIndex(slides.length - 1);\r\n    } else {\r\n      setCurrentIndex(currentIndex - 1);\r\n    }\r\n  };\r\n\r\n  // function that handle slide to the next image\r\n  const goToNextHandler = () => {\r\n    if (currentIndex === slides.length - 1) {\r\n      setCurrentIndex(0);\r\n    } else {\r\n      setCurrentIndex(currentIndex + 1);\r\n    }\r\n  };\r\n\r\n  // function that handle the slider dots to be able to go to the specific slide\r\n  const goToSlide = (slideIndex) => {\r\n    setCurrentIndex(slideIndex);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <SliderStyles>\r\n        <LeftArrowStyles onClick={goToPreviousHandler}>\r\n          <IoIosArrowBack />\r\n        </LeftArrowStyles>\r\n        <RightArrowStyles onClick={goToNextHandler}>\r\n          <IoIosArrowForward />\r\n        </RightArrowStyles>\r\n        <SlideStyle\r\n          style={{ backgroundImage: `url(${slides[currentIndex]})` }}\r\n        ></SlideStyle>\r\n        <DotContainer>\r\n          {slides.map((slide, slideIndex) => {\r\n            return (\r\n              <Dot key={slideIndex} onClick={() => goToSlide(slideIndex)}>\r\n                ◦\r\n              </Dot>\r\n            );\r\n          })}\r\n        </DotContainer>\r\n      </SliderStyles>\r\n    </>\r\n  );\r\n};\r\n\r\n// image slider style\r\nconst SliderStyles = styled.div`\r\n  height: 100%;\r\n  position: relative;\r\n`;\r\n\r\nconst SlideStyle = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  border-radius: 25px;\r\n  background-position: center;\r\n  background-size: cover;\r\n`;\r\n\r\nconst LeftArrowStyles = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  transform: translate(0, -50%);\r\n  left: 17px;\r\n  font-size: 45px;\r\n  color: #fff;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst RightArrowStyles = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  transform: translate(0, -50%);\r\n  right: 17px;\r\n  font-size: 45px;\r\n  color: #fff;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst DotContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 99%;\r\n  left: 50%;\r\n  transform: translate(-50%, -99%);\r\n`;\r\n\r\nconst Dot = styled.div`\r\n  margin: 0 7px;\r\n  cursor: pointer;\r\n  font-size: 50px;\r\n  color: #f5f0ed;\r\n`;\r\nexport default ImageSlider;\r\n","import React, { useState, useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { DateRange } from \"react-date-range\";\r\nimport format from \"date-fns/format\";\r\nimport { getDatesInRange } from \"../../utils/utils\";\r\nimport useClickOutside from \"../hooks/useClickOutside\";\r\n\r\nimport \"react-date-range/dist/styles.css\";\r\nimport \"react-date-range/dist/theme/default.css\";\r\n\r\nimport { BookingContext } from \"../context/BookingContext\";\r\n\r\nconst Calendar = ({ reservations }) => {\r\n  const { dateRange, setDateRange } = useContext(BookingContext);\r\n\r\n  // open and close the calander\r\n  const [open, setOpen] = useState(false);\r\n\r\n  // custom hook to check and close if we click outside the calender\r\n  let ref = useClickOutside(() => {\r\n    setOpen(false);\r\n  });\r\n\r\n  // looping over the reservations array to get all days to disable\r\n  const allDisabledDates = reservations\r\n    .map((reservation) => {\r\n      const d1 = reservation.bookingDate[0].startDate.slice(0, 10);\r\n      const d2 = reservation.bookingDate[0].endDate.slice(0, 10);\r\n\r\n      const startDate = new Date(d1);\r\n      const endDate = new Date(d2);\r\n\r\n      let dates = getDatesInRange(startDate, endDate);\r\n\r\n      return dates;\r\n    })\r\n    .flat(1);\r\n\r\n  return (\r\n    <div>\r\n      <Input\r\n        value={`${format(dateRange[0].startDate, \"MM/dd/yyyy\")} to ${format(\r\n          dateRange[0].endDate,\r\n          \"MM/dd/yyyy\"\r\n        )}`}\r\n        readOnly\r\n        onClick={() => setOpen(!open)}\r\n      />\r\n\r\n      <CalenderWrapper ref={ref}>\r\n        {open && (\r\n          <DateRange\r\n            onChange={(date) => setDateRange([date.selection])}\r\n            ranges={dateRange}\r\n            editableDateInputs={true}\r\n            moveRangeOnFirstSelection={false}\r\n            months={1}\r\n            minDate={new Date()}\r\n            disabledDates={[...allDisabledDates]}\r\n            direction=\"horizontal\"\r\n            className=\"calender\"\r\n          />\r\n        )}\r\n      </CalenderWrapper>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Calander style\r\nconst Input = styled.input`\r\n  padding: 7px;\r\n  width: 90%;\r\n  font-size: 17px;\r\n  border-radius: 5px;\r\n  border: 1px solid;\r\n  outline: none;\r\n  color: #242526;\r\n`;\r\n\r\nconst CalenderWrapper = styled.div`\r\n  .calender {\r\n    width: 90%;\r\n  }\r\n`;\r\nexport default Calendar;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { FaStar } from \"react-icons/fa\";\r\n\r\nconst Review = ({ review }) => {\r\n  // create an array of star depending on how many star review we have\r\n  const stars = Array(Number(review.rating)).fill(0);\r\n\r\n  return (\r\n    <ReviewContainer>\r\n      <Top>\r\n        <UserPicture>\r\n          <img src={review.clientPicture} alt=\"user Profile\" />\r\n        </UserPicture>\r\n        <ReviewInfo>\r\n          <ReviewInfoTop>\r\n            <h4>{review.clientUsername}</h4>\r\n            <p>{review.createdAt.slice(4, 15)}</p>\r\n          </ReviewInfoTop>\r\n\r\n          <ReviewStars>\r\n            {stars.map((_, index) => {\r\n              return <FaStar key={index} />;\r\n            })}\r\n          </ReviewStars>\r\n        </ReviewInfo>\r\n      </Top>\r\n      <ReviewSection>\r\n        <div>{review.review}</div>\r\n      </ReviewSection>\r\n    </ReviewContainer>\r\n  );\r\n};\r\n\r\n// review style\r\nconst ReviewContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  border-top: 1px solid #242526;\r\n  padding-top: 12px;\r\n  margin: 10px 0 25px 0;\r\n`;\r\nconst Top = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  gap: 7px;\r\n  padding-bottom: 12px;\r\n`;\r\nconst UserPicture = styled.div`\r\n  img {\r\n    width: 70px;\r\n    height: 70px;\r\n    border-radius: 50%;\r\n  }\r\n`;\r\nconst ReviewInfo = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n`;\r\n\r\nconst ReviewStars = styled.div`\r\n  display: flex;\r\n  gap: 2px;\r\n`;\r\nconst ReviewInfoTop = styled.div`\r\n  display: flex;\r\n  gap: 8px;\r\n  align-items: center;\r\n\r\n  p {\r\n    font-size: 13px;\r\n  }\r\n`;\r\nconst ReviewSection = styled.div``;\r\nexport default Review;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { FaStar } from \"react-icons/fa\";\r\nimport { Circles } from \"react-loader-spinner\";\r\n\r\nconst ReviewForm = ({\r\n  setReviews,\r\n  currentUserId,\r\n  listingId,\r\n  reviews,\r\n  user,\r\n}) => {\r\n  const [starHoverValue, setStarHoverValue] = useState(undefined);\r\n\r\n  const [userReview, setUserReview] = useState({\r\n    review: \"\",\r\n    clientUsername: user?.username,\r\n    clientId: currentUserId,\r\n    clientPicture: user?.picture,\r\n    listingId: listingId,\r\n    rating: 0,\r\n    createdAt: new Date(Date.now()).toString(),\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // function that handle the update of state and sending the data to our db\r\n  const createReviewHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      setLoading(true);\r\n      // add the new review to our reviews state\r\n      setReviews([userReview, ...reviews]);\r\n\r\n      setUserReview((prev) => ({ ...prev, review: \"\", rating: 0 }));\r\n\r\n      // POST info to server\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(userReview),\r\n      };\r\n\r\n      // send the new review to our db\r\n      const sendNewReview = fetch(\r\n        `${process.env.REACT_APP_BACKEND_URL}/api/add-review`,\r\n        requestOptions\r\n      );\r\n\r\n      if (sendNewReview.ok) {\r\n        setLoading(false);\r\n      } else {\r\n        setLoading(false);\r\n      }\r\n    } catch (error) {\r\n      console.log(error.stack);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={createReviewHandler}>\r\n      <ReviewStars>\r\n        {Array(5)\r\n          .fill(0)\r\n          .map((_, index) => {\r\n            return (\r\n              <FaStar\r\n                key={index}\r\n                style={{\r\n                  cursor: \"pointer\",\r\n                }}\r\n                color={\r\n                  (starHoverValue || userReview.rating) > index\r\n                    ? \"#000\"\r\n                    : \"grey\"\r\n                }\r\n                value={userReview.rating}\r\n                name=\"rating\"\r\n                onClick={(e) =>\r\n                  setUserReview((prev) => ({\r\n                    ...prev,\r\n                    rating: index + 1,\r\n                  }))\r\n                }\r\n                onMouseOver={() => setStarHoverValue(index + 1)}\r\n                onMouseLeave={() => setStarHoverValue(undefined)}\r\n              />\r\n            );\r\n          })}\r\n      </ReviewStars>\r\n      <TextArea\r\n        value={userReview.review}\r\n        name=\"review\"\r\n        placeholder=\"Write your review here!\"\r\n        onChange={(e) =>\r\n          setUserReview((prev) => ({\r\n            ...prev,\r\n            [e.target.name]: e.target.value,\r\n          }))\r\n        }\r\n      />\r\n      <Button\r\n        type=\"submit\"\r\n        disabled={userReview.rating === 0 && userReview.review.trim() === \"\"}\r\n      >\r\n        {loading ? (\r\n          <Circles\r\n            height=\"30\"\r\n            width=\"30\"\r\n            color=\"#000\"\r\n            ariaLabel=\"circles-loading\"\r\n            wrapperClass=\"spinner\"\r\n            visible={true}\r\n          />\r\n        ) : (\r\n          \"Send Review\"\r\n        )}\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\n// form style\r\nconst Form = styled.form`\r\n  margin: 20px 0;\r\n`;\r\n\r\nconst TextArea = styled.textarea`\r\n  margin: 15px 0;\r\n  min-width: 100%;\r\n  max-width: 100%;\r\n  border-radius: 5px;\r\n  outline: none;\r\n  height: 70px;\r\n  padding: 9px;\r\n  font-size: 16px;\r\n`;\r\n\r\nconst ReviewStars = styled.div`\r\n  padding-left: 2px;\r\n  display: flex;\r\n  gap: 5px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  padding: 10px 25px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  background: transparent;\r\n  border: 1px solid;\r\n  border-radius: 5px;\r\n  transition: background 0.5s ease-in-out;\r\n\r\n  :hover {\r\n    background-color: #dadce1;\r\n  }\r\n`;\r\nexport default ReviewForm;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport Review from \"./Review\";\r\nimport ReviewForm from \"./ReviewForm\";\r\nimport { CurrentUserContext } from \"../context/CurrentUserContext\";\r\n\r\nconst Reviews = ({ currentUserId, listingId, reviewsIds }) => {\r\n  // get user information from current user context hook\r\n  const { user } = useContext(CurrentUserContext);\r\n\r\n  // state to store all comment or reviews that we get from backend\r\n  const [reviews, setReviews] = useState([]);\r\n\r\n  // fetch the reviews on mount\r\n  useEffect(() => {\r\n    try {\r\n      // finction that handle the fetch of all reviews for this listing form our db\r\n      const getAllReviewsHandler = async () => {\r\n        // we check if there are reviews in this listing\r\n        if (reviewsIds.length > 0) {\r\n          // fetching all reviews form our db\r\n          const AllReviews = await fetch(\r\n            `${process.env.REACT_APP_BACKEND_URL}/api/reviews/listing/${listingId}`\r\n          );\r\n\r\n          if (AllReviews.ok) {\r\n            // parse the response data\r\n            const parsedAllReviews = await AllReviews.json();\r\n\r\n            if (parsedAllReviews.data.length > 0) {\r\n              // set the reviews state to the data received\r\n              setReviews(parsedAllReviews.data);\r\n            }\r\n          }\r\n        }\r\n      };\r\n      getAllReviewsHandler();\r\n    } catch (error) {\r\n      console.log(error.stack);\r\n    }\r\n  }, [listingId]);\r\n\r\n  return (\r\n    <>\r\n      <h2>Reviews</h2>\r\n      {user && (\r\n        <>\r\n          <h4>Your Review Is Important For Us</h4>\r\n          <ReviewForm\r\n            setReviews={setReviews}\r\n            reviews={reviews}\r\n            currentUserId={currentUserId}\r\n            listingId={listingId}\r\n            user={user}\r\n          />\r\n        </>\r\n      )}\r\n\r\n      <div>\r\n        {reviews &&\r\n          reviews.map((review) => {\r\n            return <Review key={review._id} review={review} />;\r\n          })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Reviews;\r\n","import React, { useContext } from \"react\";\r\nimport { useParams, useNavigate, NavLink } from \"react-router-dom\";\r\nimport { useQuery, useQueryClient } from \"react-query\";\r\nimport styled from \"styled-components\";\r\nimport ImageSlider from \"../components/styleComponents/ImageSlider\";\r\nimport beachsurf from \"../assets/beachsurf.jpg\";\r\nimport cyclists from \"../assets/cyclists.jpg\";\r\nimport snow1 from \"../assets/snow1.jpg\";\r\nimport surf1 from \"../assets/surf1.jpg\";\r\nimport Calendar from \"../components/styleComponents/Calendar\";\r\nimport { scrollToTop } from \"../utils/utils\";\r\nimport Chat from \"../components/chatSystem/Chat\";\r\nimport Reviews from \"../components/Reviews/Reviews\";\r\nimport { ChatContext } from \"../components/context/ChatContext\";\r\nimport { CurrentUserContext } from \"../components/context/CurrentUserContext\";\r\nimport {\r\n  fetchListingById,\r\n  fetchRenter,\r\n  fetchReservations,\r\n} from \"../utils/apiFetchFunctions\";\r\nimport { Circles } from \"react-loader-spinner\";\r\n\r\nconst Listing = () => {\r\n  // getting information from our chat context\r\n  const { openChat, setOpenChat } = useContext(ChatContext);\r\n\r\n  // get user information from current user context hook\r\n  const { user } = useContext(CurrentUserContext);\r\n\r\n  // Get listing id from useParams hook (from url)\r\n  const { id } = useParams();\r\n\r\n  // Using useNavigate hook to redirect user to specific page\r\n  const navigate = useNavigate();\r\n\r\n  // Get cached data from react query cache\r\n  const queryClient = useQueryClient();\r\n\r\n  // fetching listing data by listing id\r\n  const { data: listing } = useQuery(\r\n    [\"listing\", id],\r\n    () => fetchListingById(id),\r\n    {\r\n      initialData: () => {\r\n        const listing = queryClient\r\n          .getQueryData(\"listings\")\r\n          ?.find((listing) => listing.id === parseInt(id));\r\n\r\n        if (listing) {\r\n          return {\r\n            data: listing,\r\n          };\r\n        } else {\r\n          return undefined;\r\n        }\r\n      },\r\n    }\r\n  );\r\n\r\n  // get renter id from the listing details\r\n  const renterId = listing?.renterId;\r\n\r\n  // fetch renter information by renter id\r\n  const { data: renter } = useQuery(\r\n    [\"renter\", renterId],\r\n    () => fetchRenter(renterId),\r\n    {\r\n      enabled: !!renterId,\r\n    }\r\n  );\r\n\r\n  // fetch all reservation for this specific listing\r\n  const { data: reservations } = useQuery([\"reservations\", id], () => {\r\n    return fetchReservations(id);\r\n  });\r\n\r\n  return (\r\n    <ListingContainer>\r\n      {listing && renter && reservations ? (\r\n        <ListingWrapper>\r\n          <Banner>\r\n            <BannerImg\r\n              src={\r\n                listing.category === \"surf\"\r\n                  ? beachsurf\r\n                  : listing.category === \"bike\"\r\n                  ? cyclists\r\n                  : listing.category === \"Snow\"\r\n                  ? snow1\r\n                  : surf1\r\n              }\r\n              alt=\"banner\"\r\n            />\r\n            <h2>{listing.name}</h2>\r\n          </Banner>\r\n          <Main>\r\n            <LeftSide>\r\n              <SliderContainer>\r\n                <ImageSlider slides={listing.imageSrc} />\r\n              </SliderContainer>\r\n              <ListingDetails>\r\n                <Description>\r\n                  <span>Description: </span>\r\n                  <p>{listing.description}</p>\r\n                </Description>\r\n                <Model>\r\n                  <span>Model: </span>\r\n                  {listing.model}\r\n                </Model>\r\n                <Size>\r\n                  <span>Size: </span>\r\n                  {listing.size}\r\n                </Size>\r\n                <Reviews\r\n                  currentUserId={user?._id}\r\n                  listingId={id}\r\n                  reviewsIds={listing.reviewsIds}\r\n                />\r\n              </ListingDetails>\r\n            </LeftSide>\r\n            <RightSide>\r\n              <Price>\r\n                <p>${listing.price}</p>\r\n                <span>/Day</span>\r\n              </Price>\r\n              <BookingWrapper>\r\n                <Calendar reservations={reservations} />\r\n                <NavLink\r\n                  to={`/listing/${listing._id}/booking`}\r\n                  onClick={scrollToTop}\r\n                >\r\n                  <BookingBtn>Book</BookingBtn>\r\n                </NavLink>\r\n              </BookingWrapper>\r\n              <RenterContact>\r\n                <NavLink to={`/renter/${renter._id}`} className=\"navlink\">\r\n                  <ProfileImg src={renter.picture} alt=\"renter picture\" />\r\n                </NavLink>\r\n                <ProfileContact>\r\n                  <NavLink to={`/renter/${renter._id}`} className=\"navlink\">\r\n                    <Username>{renter.username}</Username>\r\n                  </NavLink>\r\n                  <Button\r\n                    onClick={() => {\r\n                      if (user) {\r\n                        setOpenChat(true);\r\n                      } else {\r\n                        navigate(\"/login\");\r\n                      }\r\n                    }}\r\n                  >\r\n                    Contact\r\n                  </Button>\r\n                </ProfileContact>\r\n              </RenterContact>\r\n            </RightSide>\r\n          </Main>\r\n          {user && (\r\n            <ChatWrapper>\r\n              <Chat\r\n                picture={renter.picture}\r\n                renterUsername={renter.username}\r\n                renterId={renter._id}\r\n                openChat={openChat}\r\n                setOpenChat={setOpenChat}\r\n                currentUserName={user?.username}\r\n                currentUserPicture={user?.picture}\r\n                currentUserId={user?._id}\r\n              />\r\n            </ChatWrapper>\r\n          )}\r\n        </ListingWrapper>\r\n      ) : (\r\n        <Circles\r\n          height=\"40\"\r\n          width=\"40\"\r\n          color=\"#01010\"\r\n          ariaLabel=\"circles-loading\"\r\n          wrapperClass=\"spinner\"\r\n          visible={true}\r\n        />\r\n      )}\r\n    </ListingContainer>\r\n  );\r\n};\r\n\r\n// listing style\r\nconst ListingContainer = styled.div`\r\n  min-height: 100vh;\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n\r\n  .spinner {\r\n    height: 60vh;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nconst ListingWrapper = styled.div`\r\n  padding-bottom: 100px;\r\n`;\r\n\r\nconst ChatWrapper = styled.div`\r\n  position: fixed;\r\n  bottom: 24px;\r\n  right: 24px;\r\n`;\r\n\r\nconst Main = styled.div`\r\n  display: flex;\r\n  max-width: 1300px;\r\n  margin: 0 auto;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    flex-direction: column-reverse;\r\n    gap: 20px;\r\n  }\r\n`;\r\n\r\nconst Banner = styled.div`\r\n  height: 160px;\r\n  position: relative;\r\n\r\n  h2 {\r\n    position: absolute;\r\n    top: 50px;\r\n    left: 20px;\r\n    font-size: 35px;\r\n    font-weight: 900;\r\n    text-transform: capitalize;\r\n    color: #242526;\r\n  }\r\n`;\r\n\r\nconst BannerImg = styled.img`\r\n  height: 160px;\r\n  width: 100%;\r\n  object-fit: cover;\r\n  opacity: 0.7;\r\n`;\r\n\r\nconst SliderContainer = styled.div`\r\n  margin-top: 30px;\r\n  width: 85%;\r\n  height: 450px;\r\n  margin: 0 auto;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    height: 250px;\r\n  }\r\n`;\r\n\r\nconst LeftSide = styled.div`\r\n  flex: 0.7;\r\n  width: 80%;\r\n  margin: 30px auto 0 auto;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    margin: 30px auto 10px auto;\r\n  }\r\n`;\r\n\r\nconst RightSide = styled.div`\r\n  flex: 0.3;\r\n  margin: 30px auto 0 auto;\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 40px;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    width: 80%;\r\n  }\r\n`;\r\n\r\nconst ListingDetails = styled.div`\r\n  margin: 30px auto;\r\n  width: 85%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n\r\n  span {\r\n    font-weight: 600;\r\n  }\r\n`;\r\n\r\nconst Description = styled.div`\r\n  p {\r\n    white-space: wrap;\r\n    overflow: hidden;\r\n  }\r\n`;\r\n\r\nconst Model = styled.div``;\r\nconst Size = styled.div``;\r\n\r\nconst Price = styled.div`\r\n  display: flex;\r\n  gap: 7px;\r\n\r\n  p {\r\n    font-size: 35px;\r\n    font-weight: 500;\r\n    color: #242526;\r\n  }\r\n\r\n  span {\r\n    padding-top: 3px;\r\n  }\r\n`;\r\n\r\nconst RenterContact = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 20px;\r\n  border-top: 1px solid;\r\n  width: 96%;\r\n  padding-top: 15px;\r\n  padding-left: 5px;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    gap: 40px;\r\n  }\r\n`;\r\n\r\nconst ProfileImg = styled.img`\r\n  width: 150px;\r\n  height: 150px;\r\n  border-radius: 10px;\r\n\r\n  @media screen and (max-width: 1000px) {\r\n    width: 130px;\r\n    height: 130px;\r\n  }\r\n`;\r\n\r\nconst ProfileContact = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: space-between;\r\n  justify-content: space-between;\r\n  gap: 25px;\r\n\r\n  .navlink {\r\n    text-decoration: none;\r\n  }\r\n`;\r\n\r\nconst Username = styled.div`\r\n  font-size: 25px;\r\n  font-weight: 700;\r\n  color: #242526;\r\n  text-transform: capitalize;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  padding: 10px 25px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  background: transparent;\r\n  border: 1px solid;\r\n  transition: background 0.5s ease-in-out;\r\n\r\n  :hover {\r\n    background-color: #dadce1;\r\n  }\r\n\r\n  @media screen and (max-width: 700px) {\r\n    padding: 10px 35px;\r\n  }\r\n`;\r\n\r\nconst BookingWrapper = styled.div``;\r\n\r\nconst BookingBtn = styled.button`\r\n  width: 90%;\r\n  padding: 10px 20px;\r\n  font-size: 17px;\r\n  background: #000;\r\n  color: #f5f0ed;\r\n  border-radius: 5px;\r\n  transition: background 0.4s ease-in-out;\r\n  margin-top: 15px;\r\n  cursor: pointer;\r\n\r\n  :hover {\r\n    background: #f5f0ed;\r\n    color: #000;\r\n  }\r\n`;\r\n\r\nexport default Listing;\r\n"],"names":["ChatWrapper","styled","div","_templateObject","_taggedTemplateLiteral","ChatWindow","_templateObject2","ChatDiv","_templateObject3","MessageWrapper","_templateObject4","RightMsg","_templateObject5","LeftMsg","_templateObject6","MsgDiv","_templateObject7","MsgEl","_templateObject8","WelcomMsgDiv","_templateObject9","WelcomeMsg","_templateObject10","Img","img","_templateObject11","Input","textarea","_templateObject12","SendButton","button","_templateObject13","Msg","_templateObject14","Button","_templateObject15","_ref","picture","renterUsername","openChat","setOpenChat","currentUserName","currentUserPicture","currentUserId","renterId","welcomeMsg","setWelcomeMsg","useState","currentChatMembers","setCurrentChatMembers","message","setMessage","chatConversation","setChatConversation","notification","setNotification","socket","useContext","ChatContext","scrollToBottomRef","useRef","effectRanOnce","useEffect","current","async","requestOptions","method","headers","body","JSON","stringify","senderId","receiverId","createAt","Date","now","response","fetch","concat","process","parseResponse","json","status","data","error","console","log","stack","createNewConversationHandler","fetchConversationByUserId","responseJson","length","findConversation","find","conversation","members","fechingConversationHandler","emit","on","_id","chatMessagesHandler","_currentChatMembers$m","_currentChatMembers$m2","includes","sendToId","sendMessageHandler","e","preventDefault","messageinfo","conversationId","text","ok","ref","useClickOutside","_scrollToBottomRef$cu","scrollIntoView","behavior","_jsxs","children","_jsx","src","alt","map","msg","index","onSubmit","value","placeholder","onChange","target","onKeyDown","key","type","BiSend","className","onClick","SliderStyles","SlideStyle","LeftArrowStyles","RightArrowStyles","DotContainer","Dot","slides","currentIndex","setCurrentIndex","_Fragment","goToPreviousHandler","IoIosArrowBack","goToNextHandler","IoIosArrowForward","style","backgroundImage","slide","slideIndex","goToSlide","input","CalenderWrapper","reservations","dateRange","setDateRange","BookingContext","open","setOpen","allDisabledDates","reservation","d1","bookingDate","startDate","slice","d2","endDate","getDatesInRange","flat","format","readOnly","DateRange","date","selection","ranges","editableDateInputs","moveRangeOnFirstSelection","months","minDate","disabledDates","direction","ReviewContainer","Top","UserPicture","ReviewInfo","ReviewStars","ReviewInfoTop","ReviewSection","review","stars","Array","Number","rating","fill","clientPicture","clientUsername","createdAt","_","FaStar","Form","form","TextArea","setReviews","listingId","reviews","user","starHoverValue","setStarHoverValue","undefined","userReview","setUserReview","username","clientId","toString","loading","setLoading","prev","cursor","color","name","onMouseOver","onMouseLeave","disabled","trim","Circles","height","width","ariaLabel","wrapperClass","visible","reviewsIds","CurrentUserContext","AllReviews","parsedAllReviews","getAllReviewsHandler","ReviewForm","Review","ListingContainer","ListingWrapper","Main","Banner","BannerImg","SliderContainer","LeftSide","RightSide","ListingDetails","Description","Model","Size","Price","RenterContact","ProfileImg","_templateObject16","ProfileContact","_templateObject17","Username","_templateObject18","_templateObject19","BookingWrapper","_templateObject20","BookingBtn","_templateObject21","Listing","id","useParams","navigate","useNavigate","queryClient","useQueryClient","listing","useQuery","fetchListingById","initialData","_queryClient$getQuery","getQueryData","parseInt","renter","fetchRenter","enabled","fetchReservations","category","beachsurf","cyclists","snow1","surf1","ImageSlider","imageSrc","description","model","size","Reviews","price","Calendar","NavLink","to","scrollToTop","Chat"],"sourceRoot":""}