{"version":3,"file":"static/js/876.341859dd.chunk.js","mappings":"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","sources":["pages/Profile.js"],"sourcesContent":["import React, { useState, useContext } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport styled from \"styled-components\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Circles } from \"react-loader-spinner\";\r\nimport { fetchUserEmail } from \"../utils/apiFetchFunctions\";\r\nimport { postPictureToCloudinary } from \"../utils/utils\";\r\nimport userDefault from \"../assets/user.png\";\r\nimport { CurrentUserContext } from \"../components/context/CurrentUserContext\";\r\n\r\nconst Profile = () => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // state for updating user info\r\n  const [updateInfo, setUpdateInfo] = useState({\r\n    username: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n    email: \"\",\r\n    picture: \"\",\r\n  });\r\n\r\n  const [passwordHasError, setPasswordHasError] = useState(false);\r\n\r\n  const [pictureLoading, setPictureLoading] = useState(false);\r\n\r\n  // using useNavigate hook to redirect user\r\n  const navigate = useNavigate();\r\n\r\n  // get user information from current user context hook\r\n  const { user } = useContext(CurrentUserContext);\r\n\r\n  //fetch user email\r\n  const { data: email } = useQuery(\r\n    [\"userEmail\", user?._id],\r\n    () => fetchUserEmail(user?._id),\r\n    {\r\n      staleTime: 5000,\r\n      enabled: !!user?._id,\r\n    }\r\n  );\r\n\r\n  // upload picture to cloudinary\r\n  const postPictureToCloudinary = async (picture) => {\r\n    setPictureLoading(true);\r\n    if (picture.type === \"image/jpeg\" || picture.type === \"image/png\") {\r\n      const data = new FormData();\r\n      data.append(\"file\", picture);\r\n      data.append(\"upload_preset\", \"laghata-app\");\r\n      data.append(\"cloud_name\", \"laghata\");\r\n\r\n      try {\r\n        const postPicture = await fetch(\r\n          `${process.env.REACT_APP_CLOUDINARY_url}`,\r\n          {\r\n            method: \"POST\",\r\n            body: data,\r\n          }\r\n        );\r\n        const responseJson = await postPicture.json();\r\n\r\n        setUpdateInfo({\r\n          ...updateInfo,\r\n          picture: responseJson.secure_url.toString(),\r\n        });\r\n        setPictureLoading(false);\r\n      } catch (error) {\r\n        console.log(error.stack);\r\n        setPictureLoading(false);\r\n      }\r\n    } else {\r\n      setPictureLoading(false);\r\n    }\r\n  };\r\n\r\n  // update user info to the database\r\n  const updateHandler = (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n\r\n    try {\r\n      if (\r\n        updateInfo.password.toLowerCase() !==\r\n        updateInfo.confirmPassword.toLowerCase()\r\n      ) {\r\n        setPasswordHasError(true);\r\n        setLoading(false);\r\n        return;\r\n      } else {\r\n        const requestOptions = {\r\n          method: \"PATCH\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n          body: JSON.stringify(updateInfo),\r\n        };\r\n        // function that update user information\r\n        const UpdateUserInfo = async () => {\r\n          if (user?._id) {\r\n            const response = await fetch(\r\n              `${process.env.REACT_APP_BACKEND_URL}/api/user/${user?._id}`,\r\n              requestOptions\r\n            );\r\n\r\n            const parseResponse = await response.json();\r\n\r\n            if (parseResponse) {\r\n              localStorage.setItem(\"token\", parseResponse?.data?.token);\r\n\r\n              setUpdateInfo({\r\n                username: \"\",\r\n                password: \"\",\r\n                confirmPassword: \"\",\r\n                email: \"\",\r\n                picture: \"\",\r\n              });\r\n\r\n              setLoading(false);\r\n              navigate(\"/\");\r\n            }\r\n          }\r\n        };\r\n        UpdateUserInfo();\r\n      }\r\n    } catch (error) {\r\n      console.log(error.stack);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // handle input changes\r\n  const handleChange = (e) => {\r\n    setUpdateInfo((prev) => ({ ...prev, [e.target.name]: e.target.value }));\r\n  };\r\n\r\n  return (\r\n    <ProfileContainer>\r\n      {!user?.isVerified && (\r\n        <VerifyEmail>\r\n          You need to verify your email before making any changes\r\n        </VerifyEmail>\r\n      )}\r\n      {user && email ? (\r\n        <Details>\r\n          <Header>\r\n            {user.picture ? (\r\n              <Img src={user.picture} alt=\"profile\" />\r\n            ) : (\r\n              <Img src={userDefault} alt=\"User profile picture\" />\r\n            )}\r\n            <div>\r\n              <UserName>{user?.username}</UserName>\r\n              <Email>{email}</Email>\r\n            </div>\r\n          </Header>\r\n          <UpdateInfo>\r\n            <form onSubmit={updateHandler}>\r\n              <UpdateTitle>Update Info:</UpdateTitle>\r\n\r\n              <InputsDiv>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"username\"\r\n                  placeholder=\"Username\"\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n                <Input\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  placeholder=\"Password\"\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n                <Input\r\n                  type=\"password\"\r\n                  name=\"confirmPassword\"\r\n                  placeholder=\"Confirm Password\"\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n                {passwordHasError && (\r\n                  <Span>Please check that your passwords match</Span>\r\n                )}\r\n                <Input\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  placeholder=\"Email\"\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n                <InputPicture\r\n                  type=\"file\"\r\n                  name=\"file\"\r\n                  id=\"file\"\r\n                  className=\"inputfile\"\r\n                  accept=\"/image/*\"\r\n                  onChange={(e) => {\r\n                    postPictureToCloudinary(e.target.files[0]);\r\n                  }}\r\n                />\r\n                <Label htmlFor=\"file\">Choose a picture</Label>\r\n              </InputsDiv>\r\n              {pictureLoading ? (\r\n                <Circles\r\n                  height=\"30\"\r\n                  width=\"30\"\r\n                  color=\"#54cbe3\"\r\n                  ariaLabel=\"circles-loading\"\r\n                  wrapperClass=\"spinnerPicture\"\r\n                  visible={true}\r\n                />\r\n              ) : (\r\n                updateInfo.picture && (\r\n                  <ImgContainer>\r\n                    <UpdateImg src={updateInfo.picture} alt=\"profile Picture\" />\r\n                  </ImgContainer>\r\n                )\r\n              )}\r\n              {!user?.isVerified ? (\r\n                <button disabled={user?.isVerified} className=\"disabledBtn\">\r\n                  Submit\r\n                </button>\r\n              ) : (\r\n                <Button type=\"submit\">\r\n                  {loading ? (\r\n                    <Circles\r\n                      height=\"30\"\r\n                      width=\"30\"\r\n                      color=\"#54cbe3\"\r\n                      ariaLabel=\"circles-loading\"\r\n                      wrapperClass=\"spinner\"\r\n                      visible={true}\r\n                    />\r\n                  ) : (\r\n                    \"Submit\"\r\n                  )}\r\n                </Button>\r\n              )}\r\n            </form>\r\n          </UpdateInfo>\r\n        </Details>\r\n      ) : (\r\n        <Circles\r\n          height=\"35\"\r\n          width=\"35\"\r\n          color=\"#010101\"\r\n          ariaLabel=\"circles-loading\"\r\n          wrapperClass=\"spinner\"\r\n          visible={true}\r\n        />\r\n      )}\r\n    </ProfileContainer>\r\n  );\r\n};\r\n\r\n// profile page style\r\nconst ProfileContainer = styled.div`\r\n  min-height: 100vh;\r\n  padding-bottom: 150px;\r\n  position: relative;\r\n\r\n  .spinner {\r\n    margin-top: 10rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nconst VerifyEmail = styled.div`\r\n  border: 1px solid;\r\n  width: fit-content;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  background: #f5f0ed;\r\n  margin: 20px auto 0 auto;\r\n  font-weight: 500;\r\n`;\r\n\r\nconst Details = styled.div`\r\n  width: 70%;\r\n  max-width: 1300px;\r\n  display: flex;\r\n  gap: 3rem;\r\n  align-items: flex-start;\r\n  justify-content: center;\r\n  margin: 2.5rem auto 0 auto;\r\n  padding: 5px 10px;\r\n\r\n  @media screen and (max-width: 1200px) {\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n    width: 100%;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nconst Header = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 150px;\r\n  gap: 1.5rem;\r\n  margin: 30px 0 40px 50px;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    width: 80%;\r\n    margin: 30px auto;\r\n  }\r\n`;\r\n\r\nconst UserName = styled.h2`\r\n  font-size: 30px;\r\n  font-weight: 500;\r\n  text-transform: capitalize;\r\n`;\r\n\r\nconst Email = styled.p`\r\n  font-size: 20px;\r\n`;\r\n\r\nconst Img = styled.img`\r\n  border-radius: 50%;\r\n  margin-top: 30px;\r\n  width: 190px;\r\n  height: 190px;\r\n  object-fit: cover;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    width: 130px;\r\n    height: 130px;\r\n  }\r\n`;\r\n\r\nconst UpdateInfo = styled.div`\r\n  border-radius: 10px;\r\n  border: 1px solid;\r\n  height: fit-content;\r\n  margin-bottom: 15px;\r\n  margin-top: 25px;\r\n  display: flex;\r\n  align-items: center;\r\n  box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;\r\n  flex-direction: column;\r\n  gap: 1.5rem;\r\n  width: 80%;\r\n\r\n  form {\r\n    width: 80%;\r\n    margin: 0 auto;\r\n  }\r\n\r\n  .spinnerPicture,\r\n  .spinner {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n\r\n  .spinnerPicture {\r\n    margin-top: 20px;\r\n  }\r\n\r\n  .disabledBtn {\r\n    padding: 12px 15px;\r\n    border: 1px solid white;\r\n    border-radius: 25px;\r\n    font-size: 18px;\r\n    transition: all 0.7s ease-in-out;\r\n    margin: 25px 0;\r\n    width: 100%;\r\n    color: black;\r\n  }\r\n\r\n  @media screen and (min-width: 700px) {\r\n    max-width: 400px;\r\n  }\r\n`;\r\n\r\nconst UpdateTitle = styled.h3`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 15px 0;\r\n  font-size: 30px;\r\n  margin: 20px 0;\r\n`;\r\n\r\nconst InputsDiv = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  gap: 1.5rem;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 12px 10px;\r\n  border-radius: 10px;\r\n  outline: none;\r\n  font-size: 17px;\r\n  border: 1px solid black;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  padding: 12px 15px;\r\n  color: white;\r\n  background: black;\r\n  border: 1px solid white;\r\n  border-radius: 25px;\r\n  font-size: 18px;\r\n  transition: all 0.7s ease-in-out;\r\n  margin: 25px 0;\r\n  width: 100%;\r\n  cursor: pointer;\r\n\r\n  :hover {\r\n    background: transparent;\r\n    color: black;\r\n    border: 1px solid black;\r\n  }\r\n\r\n  .spinner {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nconst InputPicture = styled.input`\r\n  height: 0.1px;\r\n  opacity: 0;\r\n  overflow: hidden;\r\n  position: absolute;\r\n  z-index: -1;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  font-size: 1.25em;\r\n  font-weight: 500;\r\n  color: black;\r\n  border: 1px solid;\r\n  background-color: transparent;\r\n  padding: 10px 15px;\r\n  display: inline-block;\r\n  cursor: pointer;\r\n  border-radius: 25px;\r\n  transition: all 0.5s ease-in-out;\r\n\r\n  :hover {\r\n    background-color: black;\r\n    color: white;\r\n  }\r\n`;\r\n\r\nconst Span = styled.span`\r\n  color: #cc0000;\r\n  padding-left: 10px;\r\n`;\r\n\r\nconst ImgContainer = styled.div`\r\n  width: 100%;\r\n  margin-top: 15px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  .spinner {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border: 1px solid;\r\n  }\r\n`;\r\nconst UpdateImg = styled.img`\r\n  height: 90px;\r\n  width: 90px;\r\n  object-fit: cover;\r\n  border-radius: 50%;\r\n`;\r\nexport default Profile;\r\n"],"names":["ProfileContainer","styled","div","_templateObject","_taggedTemplateLiteral","VerifyEmail","_templateObject2","Details","_templateObject3","Header","_templateObject4","UserName","h2","_templateObject5","Email","p","_templateObject6","Img","img","_templateObject7","UpdateInfo","_templateObject8","UpdateTitle","h3","_templateObject9","InputsDiv","_templateObject10","Input","input","_templateObject11","Button","button","_templateObject12","InputPicture","_templateObject13","Label","label","_templateObject14","Span","span","_templateObject15","ImgContainer","_templateObject16","UpdateImg","_templateObject17","Profile","loading","setLoading","useState","updateInfo","setUpdateInfo","username","password","confirmPassword","email","picture","passwordHasError","setPasswordHasError","pictureLoading","setPictureLoading","navigate","useNavigate","user","useContext","CurrentUserContext","data","useQuery","_id","fetchUserEmail","staleTime","enabled","handleChange","e","prev","target","name","value","_jsxs","children","isVerified","_jsx","src","alt","userDefault","onSubmit","preventDefault","toLowerCase","requestOptions","method","headers","Authorization","concat","localStorage","getItem","body","JSON","stringify","async","response","fetch","process","parseResponse","json","_parseResponse$data","setItem","token","UpdateUserInfo","error","console","log","stack","type","placeholder","onChange","required","id","className","accept","FormData","append","postPicture","REACT_APP_CLOUDINARY_url","responseJson","secure_url","toString","postPictureToCloudinary","files","htmlFor","Circles","height","width","color","ariaLabel","wrapperClass","visible","disabled"],"sourceRoot":""}