{"version":3,"file":"static/js/260.04262140.chunk.js","mappings":"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","sources":["components/auth/ResetPassword.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport logoBlack from \"../../assets/logoBlack.png\";\r\nimport { scrollToTop } from \"../../utils/utils\";\r\nimport { Circles } from \"react-loader-spinner\";\r\n\r\nconst ResetPassword = () => {\r\n  const [success, setSuccess] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // getting passwordResetCode from the url\r\n  const { passwordResetCode } = useParams();\r\n\r\n  // passwordReset handler\r\n  const passwordResetHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    setLoading(true);\r\n\r\n    // POST info to server\r\n    const requestOptions = {\r\n      method: \"PUT\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ newPassword: password }),\r\n    };\r\n\r\n    // function that handle the post of data to db\r\n    const resetPasswordHandler = async () => {\r\n      try {\r\n        await fetch(\r\n          `${process.env.REACT_APP_BACKEND_URL}/api/users/${passwordResetCode}/reset-password`,\r\n          requestOptions\r\n        );\r\n\r\n        setSuccess(true);\r\n\r\n        setLoading(false);\r\n\r\n        localStorage.clear();\r\n      } catch (error) {\r\n        console.log(error.message);\r\n        setError(true);\r\n        setLoading(false);\r\n      }\r\n    };\r\n    resetPasswordHandler();\r\n\r\n    setLoading(false);\r\n  };\r\n  return (\r\n    <ResetPasswordContainer>\r\n      <Info>\r\n        <form onSubmit={passwordResetHandler}>\r\n          <LogoContainer>\r\n            <Logo src={logoBlack} alt=\"logoBlack\" />\r\n          </LogoContainer>\r\n          {success ? (\r\n            <>\r\n              <Title>Success</Title>\r\n              <Message>\r\n                Your Password has been changed, now please login with your new\r\n                password\r\n              </Message>\r\n              <Button\r\n                onClick={() => {\r\n                  navigate(\"/login\"), scrollToTop();\r\n                }}\r\n              >\r\n                Login\r\n              </Button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Title>Reset Password</Title>\r\n              <Message>Please enter your a new password</Message>\r\n              {error && (\r\n                <Message>\r\n                  We couldn't update your password please try again\r\n                </Message>\r\n              )}\r\n              <InputsDiv>\r\n                <Input\r\n                  type=\"password\"\r\n                  placeholder=\"Password\"\r\n                  onChange={(e) => {\r\n                    setPassword(e.target.value);\r\n                  }}\r\n                  required\r\n                />\r\n                <Input\r\n                  type=\"password\"\r\n                  placeholder=\"Confirm Password\"\r\n                  onChange={(e) => {\r\n                    setConfirmPassword(e.target.value);\r\n                  }}\r\n                  required\r\n                />\r\n              </InputsDiv>\r\n              <Button\r\n                type=\"submit\"\r\n                disabled={\r\n                  password.toLowerCase() !== confirmPassword.toLowerCase() ||\r\n                  password === \"\" ||\r\n                  confirmPassword === \"\"\r\n                }\r\n              >\r\n                {loading ? (\r\n                  <Circles\r\n                    height=\"30\"\r\n                    width=\"30\"\r\n                    color=\"#54cbe3\"\r\n                    ariaLabel=\"circles-loading\"\r\n                    wrapperClass=\"spinner\"\r\n                    visible={true}\r\n                  />\r\n                ) : (\r\n                  \"Reset Password\"\r\n                )}\r\n              </Button>\r\n            </>\r\n          )}\r\n        </form>\r\n      </Info>\r\n    </ResetPasswordContainer>\r\n  );\r\n};\r\n\r\n// style ResetPassword page\r\nconst ResetPasswordContainer = styled.div`\r\n  min-height: 100vh;\r\n  position: relative;\r\n`;\r\n\r\nconst Info = styled.div`\r\n  width: fit-content;\r\n  padding: 50px;\r\n  margin: 10rem auto;\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-radius: 12px;\r\n  box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    width: 90%;\r\n    padding: 30px;\r\n  }\r\n`;\r\n\r\nconst Title = styled.h3`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 15px 0 5px 0;\r\n  font-size: 30px;\r\n  margin: 20px 0 10px 0;\r\n`;\r\n\r\nconst Message = styled.p`\r\n  margin: 20px 0 20px 0;\r\n  text-align: center;\r\n`;\r\n\r\nconst LogoContainer = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Logo = styled.img`\r\n  width: 150px;\r\n`;\r\n\r\nconst InputsDiv = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  gap: 1.5rem;\r\n  width: 100%;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    width: 300px;\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 12px 10px;\r\n  border-radius: 25px;\r\n  outline: none;\r\n  font-size: 17px;\r\n  border: 1px solid black;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  padding: 12px 15px;\r\n  color: white;\r\n  background: black;\r\n  border: 1px solid white;\r\n  border-radius: 25px;\r\n  font-size: 18px;\r\n  transition: all 0.7s ease-in-out;\r\n  margin: 25px 0;\r\n  width: 100%;\r\n  cursor: pointer;\r\n\r\n  :hover {\r\n    background: transparent;\r\n    color: black;\r\n    border: 1px solid black;\r\n  }\r\n\r\n  .spinner {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nexport default ResetPassword;\r\n"],"names":["ResetPasswordContainer","styled","div","_templateObject","_taggedTemplateLiteral","Info","_templateObject2","Title","h3","_templateObject3","Message","p","_templateObject4","LogoContainer","_templateObject5","Logo","img","_templateObject6","InputsDiv","_templateObject7","Input","input","_templateObject8","Button","button","_templateObject9","ResetPassword","success","setSuccess","useState","error","setError","password","setPassword","confirmPassword","setConfirmPassword","loading","setLoading","navigate","useNavigate","passwordResetCode","useParams","_jsx","children","_jsxs","onSubmit","async","e","preventDefault","requestOptions","method","headers","body","JSON","stringify","newPassword","fetch","concat","process","localStorage","clear","console","log","message","resetPasswordHandler","src","logoBlack","alt","_Fragment","onClick","scrollToTop","type","placeholder","onChange","target","value","required","disabled","toLowerCase","Circles","height","width","color","ariaLabel","wrapperClass","visible"],"sourceRoot":""}