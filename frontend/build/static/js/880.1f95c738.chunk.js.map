{"version":3,"file":"static/js/880.1f95c738.chunk.js","mappings":"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","sources":["components/chatSystem/Chat.js","pages/Renter.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport useClickOutside from \"../hooks/useClickOutside\";\r\nimport { BiSend } from \"react-icons/bi\";\r\nimport { ChatContext } from \"../context/ChatContext\";\r\n\r\nconst Chat = ({\r\n  picture,\r\n  renterUsername,\r\n  openChat,\r\n  setOpenChat,\r\n  currentUserName,\r\n  currentUserPicture,\r\n  currentUserId,\r\n  renterId,\r\n}) => {\r\n  const [welcomeMsg, setWelcomeMsg] = useState(\"\");\r\n  const {\r\n    currentChatMembers,\r\n    setCurrentChatMembers,\r\n    message,\r\n    setMessage,\r\n    chatConversation,\r\n    setChatConversation,\r\n    notification,\r\n    setNotification,\r\n    socket,\r\n  } = useContext(ChatContext);\r\n\r\n  // using ref to scroll to bottom inside div messages\r\n  const scrollToBottomRef = useRef();\r\n\r\n  // using useRef to prevent useEffect from running twice as it does in version 18\r\n  // without this method it will create a conversation twice each time\r\n  const effectRanOnce = useRef(false);\r\n\r\n  // create new conversation if we don't find one when user open the chat\r\n  useEffect(() => {\r\n    if (effectRanOnce.current === false) {\r\n      const createNewConversationHandler = async () => {\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            senderId: currentUserId,\r\n            receiverId: renterId,\r\n            createAt: Date.now(),\r\n          }),\r\n        };\r\n\r\n        try {\r\n          // post a new conversation between the renter and the current user\r\n          const response = await fetch(\r\n            `${process.env.REACT_APP_BACKEND_URL}/api/conversation`,\r\n            requestOptions\r\n          );\r\n\r\n          // parse the response\r\n          const parseResponse = await response.json();\r\n\r\n          if (parseResponse.status === 201) {\r\n            setCurrentChatMembers(parseResponse.data);\r\n          }\r\n        } catch (error) {\r\n          console.log(error.stack);\r\n        }\r\n      };\r\n      createNewConversationHandler();\r\n\r\n      // cleanup function\r\n      return () => {\r\n        // set the effectRanOnce to true to prevent useEffect from running twice\r\n        effectRanOnce.current = true;\r\n      };\r\n    }\r\n  }, [currentUserId, renterId]);\r\n\r\n  // fetching conversation by user id\r\n  useEffect(() => {\r\n    try {\r\n      // function that handle the fetch from our database\r\n      const fechingConversationHandler = async () => {\r\n        // fetching conversation data by user id\r\n        const fetchConversationByUserId = await fetch(\r\n          `${process.env.REACT_APP_BACKEND_URL}/api/conversation/${currentUserId}`\r\n        );\r\n\r\n        // parse the response\r\n        const responseJson = await fetchConversationByUserId.json();\r\n\r\n        if (responseJson.data.length > 0) {\r\n          const findConversation = responseJson.data.find((conversation) => {\r\n            return (\r\n              (conversation.members[0] === currentUserId &&\r\n                conversation.members[1] === renterId) ||\r\n              (conversation.members[1] === currentUserId &&\r\n                conversation.members[0] === renterId)\r\n            );\r\n          });\r\n\r\n          setCurrentChatMembers(findConversation);\r\n        }\r\n      };\r\n      fechingConversationHandler();\r\n    } catch (error) {\r\n      console.log(error.stack);\r\n    }\r\n  }, []);\r\n\r\n  // first initialisation with the server\r\n  useEffect(() => {\r\n    if (socket) {\r\n      // emiting information details to the server\r\n      socket.emit(\"welcome-message\", { currentUserName, renterUsername });\r\n      socket.emit(\"initialisation-add-user\", currentUserId);\r\n\r\n      // recieving the welcome message from the server and store it in welcome msg state\r\n      socket.on(\"welcome-response\", (message) => {\r\n        setWelcomeMsg(message);\r\n      });\r\n    }\r\n  }, [socket, currentUserName, currentUserId]);\r\n\r\n  // fetch all messages for specific chat\r\n  useEffect(() => {\r\n    // function that handle the fetch of messages\r\n    const chatMessagesHandler = async () => {\r\n      try {\r\n        // fetching messages data by chat id\r\n        const response = await fetch(\r\n          `${process.env.REACT_APP_BACKEND_URL}/api/messages/${currentChatMembers?._id}`\r\n        );\r\n\r\n        // parse the response\r\n        const responseJson = await response.json();\r\n\r\n        if (responseJson.data.length > 0) {\r\n          setChatConversation(responseJson.data);\r\n        }\r\n      } catch (error) {\r\n        console.log(error.stack);\r\n      }\r\n    };\r\n    chatMessagesHandler();\r\n  }, [currentChatMembers]);\r\n\r\n  // receiving new messages from the server\r\n  useEffect(() => {\r\n    if (socket) {\r\n      // getting messege from the server\r\n      socket.on(\"getMessage\", (data) => {\r\n        if (\r\n          currentChatMembers?.members?.includes(data.senderId) === true &&\r\n          currentChatMembers?.members?.includes(data.sendToId) === true\r\n        ) {\r\n          setChatConversation([...chatConversation, data]);\r\n        } else if (!openChat && !notification.includes(data)) {\r\n          setNotification([...notification, data]);\r\n        }\r\n      });\r\n    }\r\n  }, [socket, chatConversation, notification, openChat]);\r\n\r\n  // function that handle the send of messages\r\n  const sendMessageHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const messageinfo = {\r\n      senderId: currentUserId,\r\n      conversationId: currentChatMembers?._id,\r\n      receiverId: renterId,\r\n      text: message,\r\n      createAt: Date.now(),\r\n    };\r\n\r\n    // emit the message to socketio server\r\n    socket.emit(\"sendMessage\", messageinfo);\r\n\r\n    setMessage(\"\");\r\n\r\n    try {\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(messageinfo),\r\n      };\r\n\r\n      // post messages to db\r\n      const response = await fetch(\r\n        `${process.env.REACT_APP_BACKEND_URL}/api/message`,\r\n        requestOptions\r\n      );\r\n\r\n      if (response.ok) {\r\n        setChatConversation([...chatConversation, messageinfo]);\r\n      }\r\n    } catch (error) {\r\n      console.log(error.stack);\r\n    }\r\n  };\r\n\r\n  // custom hook to check and close if we click outside the chat\r\n  let ref = useClickOutside(() => {\r\n    setOpenChat(false);\r\n  });\r\n\r\n  // finction to scroll to bottom when reveiving or sending messages\r\n  useEffect(() => {\r\n    scrollToBottomRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [chatConversation]);\r\n\r\n  return (\r\n    <ChatWrapper ref={ref}>\r\n      {openChat && (\r\n        <ChatWindow>\r\n          <ChatDiv>\r\n            {chatConversation.length === 0 && (\r\n              <WelcomMsgDiv>\r\n                <Img src={picture} alt=\"userProfile\" />\r\n                <WelcomeMsg>{welcomeMsg.text}</WelcomeMsg>\r\n              </WelcomMsgDiv>\r\n            )}\r\n            <MsgDiv>\r\n              {chatConversation.map((msg, index) => {\r\n                return (\r\n                  <MessageWrapper key={index} ref={scrollToBottomRef}>\r\n                    {msg.senderId !== currentUserId &&\r\n                    msg.senderId === renterId ? (\r\n                      <RightMsg>\r\n                        <MsgEl key={index}>{msg.text}</MsgEl>\r\n                        <Img src={picture} alt=\"RenterProfile\" />\r\n                      </RightMsg>\r\n                    ) : (\r\n                      msg.senderId === currentUserId &&\r\n                      msg.receiverId === renterId && (\r\n                        <LeftMsg>\r\n                          <Img src={currentUserPicture} alt=\"userProfile\" />\r\n                          <MsgEl>{msg.text}</MsgEl>\r\n                        </LeftMsg>\r\n                      )\r\n                    )}\r\n                  </MessageWrapper>\r\n                );\r\n              })}\r\n            </MsgDiv>\r\n          </ChatDiv>\r\n          <form onSubmit={sendMessageHandler}>\r\n            <Input\r\n              value={message}\r\n              placeholder=\"Message\"\r\n              onChange={(e) => setMessage(e.target.value)}\r\n              onKeyDown={(e) =>\r\n                e.key === \"Enter\" ? sendMessageHandler(e) : null\r\n              }\r\n            />\r\n            <SendButton type=\"submit\">\r\n              <BiSend className=\"sendIcon\" />\r\n            </SendButton>\r\n          </form>\r\n        </ChatWindow>\r\n      )}\r\n      <Button\r\n        onClick={() => {\r\n          // toggle the open and close of the chat\r\n          setOpenChat(!openChat);\r\n        }}\r\n      >\r\n        <Msg className=\"msg-display\">Hey i'm {renterUsername}!</Msg>\r\n        <img src={picture} alt=\"renter picture\" />\r\n      </Button>\r\n    </ChatWrapper>\r\n  );\r\n};\r\n\r\n// chat style\r\nconst ChatWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end;\r\n`;\r\nconst ChatWindow = styled.div`\r\n  width: 290px;\r\n  height: 400px;\r\n  border: 1px solid #000;\r\n  background-color: #f5f5f3;\r\n  border-radius: 10px;\r\n  transition: all 0.5s ease;\r\n\r\n  border: 1px solid;\r\n  z-index: 99999;\r\n  position: relative;\r\n`;\r\n\r\nconst ChatDiv = styled.div`\r\n  height: 340px;\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n\r\n  ::-webkit-scrollbar {\r\n    width: 8px;\r\n    height: 8px;\r\n  }\r\n\r\n  ::-webkit-scrollbar-thumb {\r\n    background: white;\r\n    border-radius: 50px;\r\n  }\r\n\r\n  ::-webkit-scrollbar-track {\r\n    background: #f5f0ed;\r\n    border-radius: 50px;\r\n    border-top-right-radius: 25px;\r\n    border-top-left-radius: 25px;\r\n  }\r\n`;\r\nconst MessageWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 9px 10px;\r\n`;\r\n\r\nconst RightMsg = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n  gap: 7px;\r\n  padding-top: 13px;\r\n`;\r\nconst LeftMsg = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n`;\r\n\r\nconst MsgDiv = styled.div`\r\n  /* max-height: 345px; */\r\n`;\r\nconst MsgEl = styled.div`\r\n  background-color: #fff;\r\n  width: fit-content;\r\n  border-radius: 25px;\r\n  padding: 10px 12px;\r\n  font-size: 15px;\r\n  font-weight: 400;\r\n`;\r\n\r\nconst WelcomMsgDiv = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  justify-content: center;\r\n  gap: 6px;\r\n  padding-top: 13px;\r\n`;\r\nconst WelcomeMsg = styled.div`\r\n  background-color: #fff;\r\n  width: 80%;\r\n  border-radius: 25px;\r\n  padding: 10px 12px;\r\n  font-size: 15px;\r\n  font-weight: 400;\r\n`;\r\nconst Img = styled.img`\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n`;\r\nconst Input = styled.textarea`\r\n  position: absolute;\r\n  bottom: 7px;\r\n  left: 5px;\r\n  padding-left: 9px;\r\n  padding-top: 10px;\r\n  width: 85%;\r\n  height: 40px;\r\n  outline: none;\r\n  border-radius: 25px;\r\n  border: 1px solid #000;\r\n  background-color: transparent;\r\n`;\r\n\r\nconst SendButton = styled.button`\r\n  position: absolute;\r\n  bottom: 7px;\r\n  right: 5px;\r\n  height: 40px;\r\n  width: 10%;\r\n  border-radius: 50%;\r\n  border: none;\r\n  background-color: transparent;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: all 0.5s ease;\r\n  border: 1px solid;\r\n\r\n  :hover {\r\n    border: none;\r\n    transform: scale(0.9);\r\n  }\r\n\r\n  .sendIcon {\r\n    font-size: 22px;\r\n    color: #242526;\r\n  }\r\n`;\r\nconst Msg = styled.div`\r\n  background: #000;\r\n  color: #f5f0ed;\r\n  padding: 7px 10px;\r\n  border-radius: 25px;\r\n  opacity: 0;\r\n  cursor: pointer;\r\n  transition: all 0.4s ease;\r\n  font-size: 15px;\r\n\r\n  :hover {\r\n    opacity: 1;\r\n  }\r\n`;\r\nconst Button = styled.button`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 9px;\r\n  background-color: transparent;\r\n  border: none;\r\n  border-radius: 50%;\r\n  height: 80px;\r\n  cursor: pointer;\r\n  transition: all 0.33s ease;\r\n\r\n  :hover {\r\n    .msg-display {\r\n      opacity: 1;\r\n    }\r\n  }\r\n\r\n  img {\r\n    width: 60px;\r\n    height: 60px;\r\n    border-radius: 50%;\r\n  }\r\n`;\r\n\r\nexport default Chat;\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport profilepage from \"../assets/profilepage.jpg\";\r\nimport Item from \"../components/Item\";\r\nimport Chat from \"../components/chatSystem/Chat\";\r\nimport LoadingSpinner from \"../components/styleComponents/LoadingSpinner\";\r\nimport { ChatContext } from \"../components/context/ChatContext\";\r\nimport { CurrentUserContext } from \"../components/context/CurrentUserContext\";\r\n\r\nconst Renter = () => {\r\n  const { openChat, setOpenChat } = useContext(ChatContext);\r\n\r\n  // get user information from current user context hook\r\n  const { user } = useContext(CurrentUserContext);\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [listings, setListings] = useState();\r\n  const [renter, setRenter] = useState([]);\r\n  const { id } = useParams();\r\n\r\n  // fetching data by renterId\r\n  useEffect(() => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // fetch all renter listing\r\n      const fechingRenterLisitngHandler = async () => {\r\n        // fetch all renter listing by render id\r\n        const fetchAllRenterListing = await fetch(\r\n          `${process.env.REACT_APP_BACKEND_URL}/api/renter-listing/${id}`\r\n        );\r\n\r\n        // parse the response\r\n        const responseJson = await fetchAllRenterListing.json();\r\n\r\n        // fetch renter informations by renter id\r\n        const fetchRenterInfo = await fetch(\r\n          `${process.env.REACT_APP_BACKEND_URL}/api/user/${id}`\r\n        );\r\n\r\n        // parse the response\r\n        const responseJsonRenter = await fetchRenterInfo.json();\r\n\r\n        if (responseJson.data && responseJsonRenter.data) {\r\n          setListings(responseJson.data);\r\n\r\n          const renterArr = [responseJsonRenter.data];\r\n\r\n          setRenter(renterArr);\r\n\r\n          setLoading(false);\r\n        } else {\r\n          setLoading(false);\r\n        }\r\n      };\r\n\r\n      fechingRenterLisitngHandler();\r\n    } catch (error) {\r\n      console.log(error.stack);\r\n      setLoading(false);\r\n    }\r\n  }, [id]);\r\n\r\n  return (\r\n    <ListingContainer>\r\n      {loading ? (\r\n        <LoadingSpinner />\r\n      ) : (\r\n        <>\r\n          {listings && renter && !loading && (\r\n            <ListingWrapper>\r\n              <Banner>\r\n                <BannerImg src={profilepage} alt=\"banner\" />\r\n                <h2>{renter[0].username}</h2>\r\n              </Banner>\r\n              <Main>\r\n                <LeftSide>\r\n                  <ListingNumber>{listings.length} open listing</ListingNumber>\r\n                  <ListingItem>\r\n                    {listings.map((listing) => {\r\n                      return (\r\n                        <Item\r\n                          listing={listing}\r\n                          renters={renter}\r\n                          key={listing._id}\r\n                        />\r\n                      );\r\n                    })}\r\n                  </ListingItem>\r\n                </LeftSide>\r\n                <RightSide>\r\n                  <ProfileImg src={renter[0].picture} />\r\n                  <Button\r\n                    onClick={() => {\r\n                      if (user) {\r\n                        setOpenChat(true);\r\n                      } else {\r\n                        navigate(\"/login\");\r\n                      }\r\n                    }}\r\n                  >\r\n                    Contact {renter[0].username}\r\n                  </Button>\r\n                </RightSide>\r\n              </Main>\r\n              {user && user?._id !== renter[0]._id && (\r\n                <ChatWrapper>\r\n                  <Chat\r\n                    picture={renter[0].picture}\r\n                    renterUsername={renter[0].username}\r\n                    renterId={renter[0]._id}\r\n                    openChat={openChat}\r\n                    setOpenChat={setOpenChat}\r\n                    currentUserName={user?.username}\r\n                    currentUserPicture={user?.picture}\r\n                    currentUserId={user?._id}\r\n                  />\r\n                </ChatWrapper>\r\n              )}\r\n            </ListingWrapper>\r\n          )}\r\n        </>\r\n      )}\r\n    </ListingContainer>\r\n  );\r\n};\r\n\r\n// renter style\r\nconst ListingContainer = styled.div`\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding-bottom: 220px;\r\n\r\n  .spinner {\r\n    height: 80vh;\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nconst ListingWrapper = styled.div``;\r\n\r\nconst Banner = styled.div`\r\n  height: 160px;\r\n  position: relative;\r\n\r\n  h2 {\r\n    position: absolute;\r\n    top: 50px;\r\n    left: 20px;\r\n    font-size: 35px;\r\n    font-weight: 900;\r\n    text-transform: capitalize;\r\n    color: #242526;\r\n  }\r\n`;\r\n\r\nconst BannerImg = styled.img`\r\n  height: 160px;\r\n  width: 100%;\r\n  object-fit: cover;\r\n  opacity: 0.3;\r\n`;\r\n\r\nconst Main = styled.div`\r\n  display: flex;\r\n  max-width: 1300px;\r\n  margin: 0 auto;\r\n  align-items: flex-start;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    flex-direction: column-reverse;\r\n  }\r\n\r\n  @media screen and (max-width: 1300px) {\r\n    gap: 100px;\r\n  }\r\n`;\r\n\r\nconst ChatWrapper = styled.div`\r\n  position: fixed;\r\n  bottom: 24px;\r\n  right: 24px;\r\n`;\r\n\r\nconst RightSide = styled.div`\r\n  flex: 0.3;\r\n  margin: 50px auto;\r\n  width: 80%;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    width: 70%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n\r\n  @media screen and (min-width: 1300px) {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nconst LeftSide = styled.div`\r\n  flex: 0.7;\r\n`;\r\n\r\nconst ListingItem = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  gap: 15px;\r\n`;\r\n\r\nconst ListingNumber = styled.h2`\r\n  padding: 19px 41px;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    margin-bottom: 15px;\r\n  }\r\n`;\r\n\r\nconst ProfileImg = styled.img`\r\n  width: 70%;\r\n  height: 240px;\r\n  border-radius: 10px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  padding: 10px 25px;\r\n  width: 70%;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  background: transparent;\r\n  border-radius: 5px;\r\n  border: 1px solid;\r\n  transition: background 0.5s ease-in-out;\r\n\r\n  :hover {\r\n    background-color: #dadce1;\r\n  }\r\n`;\r\nexport default Renter;\r\n"],"names":["ChatWrapper","styled","div","_templateObject","_taggedTemplateLiteral","ChatWindow","_templateObject2","ChatDiv","_templateObject3","MessageWrapper","_templateObject4","RightMsg","_templateObject5","LeftMsg","_templateObject6","MsgDiv","_templateObject7","MsgEl","_templateObject8","WelcomMsgDiv","_templateObject9","WelcomeMsg","_templateObject10","Img","img","_templateObject11","Input","textarea","_templateObject12","SendButton","button","_templateObject13","Msg","_templateObject14","Button","_templateObject15","_ref","picture","renterUsername","openChat","setOpenChat","currentUserName","currentUserPicture","currentUserId","renterId","welcomeMsg","setWelcomeMsg","useState","currentChatMembers","setCurrentChatMembers","message","setMessage","chatConversation","setChatConversation","notification","setNotification","socket","useContext","ChatContext","scrollToBottomRef","useRef","effectRanOnce","useEffect","current","async","requestOptions","method","headers","body","JSON","stringify","senderId","receiverId","createAt","Date","now","response","fetch","concat","process","parseResponse","json","status","data","error","console","log","stack","createNewConversationHandler","fetchConversationByUserId","responseJson","length","findConversation","find","conversation","members","fechingConversationHandler","emit","on","_id","chatMessagesHandler","_currentChatMembers$m","_currentChatMembers$m2","includes","sendToId","sendMessageHandler","e","preventDefault","messageinfo","conversationId","text","ok","ref","useClickOutside","_scrollToBottomRef$cu","scrollIntoView","behavior","_jsxs","children","_jsx","src","alt","map","msg","index","onSubmit","value","placeholder","onChange","target","onKeyDown","key","type","BiSend","className","onClick","ListingContainer","ListingWrapper","Banner","BannerImg","Main","RightSide","LeftSide","ListingItem","ListingNumber","h2","ProfileImg","Renter","user","CurrentUserContext","loading","setLoading","listings","setListings","renter","setRenter","id","useParams","fetchAllRenterListing","fetchRenterInfo","responseJsonRenter","renterArr","fechingRenterLisitngHandler","LoadingSpinner","_Fragment","profilepage","username","listing","Item","renters","navigate","Chat"],"sourceRoot":""}